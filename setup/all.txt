// lib/models/download_state.dart

import 'package:flutter_riverpod/flutter_riverpod.dart';

class DownloadState extends StateNotifier<AsyncValue<String>> {
  DownloadState() : super(const AsyncValue.data(''));

  void updateState(AsyncValue<String> newState) {
    state = newState;
  }
}

// lib/providers/download_provider.dart

import 'package:downlista/models/download_state.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../services/download_service.dart';

final downloadProvider =
    StateNotifierProvider<DownloadState, AsyncValue<String>>((ref) {
  return DownloadState()..updateState(const AsyncValue.data(''));
});

final downloadServiceProvider = Provider<DownloadService>((ref) {
  return DownloadService();
});


// lib/screens/home_screen.dart

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../providers/download_provider.dart';

class HomePage extends ConsumerWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final asyncValue = ref.watch(downloadProvider);
    final TextEditingController urlController = TextEditingController();

    return Scaffold(
      appBar: AppBar(title: const Text('TikTok Video Downloader')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            TextField(
              controller: urlController,
              decoration: const InputDecoration(
                labelText: 'Enter TikTok Video URL',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                final url = urlController.text.trim();
                if (url.isNotEmpty) {
                  final downloadService = ref.read(downloadServiceProvider);
                  downloadService.downloadVideo(url, (state) {
                    ref.read(downloadProvider.notifier).updateState(state);
                  });
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('Please enter a valid URL')),
                  );
                }
              },
              child: const Text('Download Video'),
            ),
            const SizedBox(height: 20),
            asyncValue.when(
              data: (path) => path.isEmpty
                  ? const Text('Ready to download!')
                  : Text('Video downloaded to: $path'),
              loading: () => const CircularProgressIndicator(),
              error: (error, stack) => Text('Error: $error',
                  style: const TextStyle(color: Colors.red)),
            ),
          ],
        ),
      ),
    );
  }
}
// lib/services/download_service.dart

import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';

class DownloadService {
  Future<void> downloadVideo(
      String tiktokUrl, void Function(AsyncValue<String>) updateState) async {
    updateState(const AsyncValue.loading());
    try {
      // Step 1: Call RapidAPI to get video details
      final apiResponse = await http.get(
        Uri.parse(
          'https://tiktok-download-without-watermark.p.rapidapi.com/analysis?url=$tiktokUrl&hd=1',
        ),
        headers: {
          'X-RapidAPI-Key':
              '1b5bb662eamsh11110cdca03efa6p132479jsn76102bf53807', // Replace with your key
          'X-RapidAPI-Host': 'tiktok-download-without-watermark.p.rapidapi.com',
        },
      );

      if (apiResponse.statusCode != 200) {
        throw Exception('Failed to fetch video URL: ${apiResponse.statusCode}');
      }

      final data = (apiResponse.body.isNotEmpty)
          ? jsonDecode(apiResponse.body)['data'] as Map<String, dynamic>
          : {};
      final videoUrl = data['hdplay'] ?? data['play'];
      if (videoUrl == null) {
        throw Exception('No downloadable video URL found');
      }

      // Step 2: Request storage permission
      if (Platform.isAndroid) {
        final permissionStatus = await Permission.storage.request();
        if (!permissionStatus.isGranted) {
          throw Exception('Storage permission denied');
        }
      }

      // Step 3: Get download path
      Directory? dir;
      if (Platform.isAndroid) {
        dir =
            await getExternalStorageDirectory(); // Or use getDownloadsDirectory()
      } else {
        dir = await getApplicationDocumentsDirectory();
      }
      final filePath =
          '${dir!.path}/tiktok_video_${DateTime.now().millisecondsSinceEpoch}.mp4';

      // Step 4: Download the video
      final videoResponse = await http.get(Uri.parse(videoUrl));
      if (videoResponse.statusCode == 200) {
        final file = File(filePath);
        await file.writeAsBytes(videoResponse.bodyBytes);
        updateState(AsyncValue.data(filePath));
      } else {
        throw Exception(
            'Failed to download video: ${videoResponse.statusCode}');
      }
    } catch (e) {
      updateState(AsyncValue.error(e, StackTrace.current));
    }
  }
}
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'screens/home_screen.dart';

void main() {
  runApp(const ProviderScope(child: MyApp()));
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'TikTok Downloader',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: const HomePage(),
    );
  }
}

error "Exception: Storage permission denied"