// lib/models/download_state.dart

import 'package:flutter_riverpod/flutter_riverpod.dart';

class DownloadState extends StateNotifier<AsyncValue<String>> {
  DownloadState() : super(const AsyncValue.data(''));

  void updateState(AsyncValue<String> newState) {
    state = newState;
  }
}

// lib/providers/download_provider.dart

import 'package:downlista/models/download_state.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../services/download_service.dart';

final downloadProvider =
    StateNotifierProvider<DownloadState, AsyncValue<String>>((ref) {
  return DownloadState()..updateState(const AsyncValue.data(''));
});

final downloadServiceProvider = Provider<DownloadService>((ref) {
  return DownloadService();
});


// lib/services/download_service.dart

import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:device_info_plus/device_info_plus.dart';

class DownloadService {
  Future<void> downloadVideo(
      String tiktokUrl, void Function(AsyncValue<String>) updateState) async {
    updateState(const AsyncValue.loading());
    try {
      print('DEBUG: Starting video download for URL: $tiktokUrl');

      // Step 1: Call RapidAPI to get video details
      print('DEBUG: Calling RapidAPI to fetch video details...');
      final apiResponse = await http.get(
        Uri.parse(
          'https://tiktok-download-without-watermark.p.rapidapi.com/analysis?url=$tiktokUrl&hd=1',
        ),
        headers: {
          'X-RapidAPI-Key':
              '1b5bb662eamsh11110cdca03efa6p132479jsn76102bf53807', // Replace with your key
          'X-RapidAPI-Host': 'tiktok-download-without-watermark.p.rapidapi.com',
        },
      );

      print('DEBUG: API Response Status Code: ${apiResponse.statusCode}');
      print('DEBUG: API Response Body: ${apiResponse.body}');

      if (apiResponse.statusCode != 200) {
        throw Exception('Failed to fetch video URL: ${apiResponse.statusCode}');
      }

      final data = (apiResponse.body.isNotEmpty)
          ? jsonDecode(apiResponse.body)['data'] as Map<String, dynamic>
          : {};
      final videoUrl = data['hdplay'] ?? data['play'];

      print('DEBUG: Extracted video URL: $videoUrl');

      if (videoUrl == null) {
        throw Exception('No downloadable video URL found');
      }

      // Step 2: Request appropriate storage permission based on Android version
      if (Platform.isAndroid) {
        print('DEBUG: Requesting storage permissions for Android...');
        bool hasPermission = await _requestStoragePermission();
        if (!hasPermission) {
          throw Exception(
              'Storage permission denied. Please grant storage permission in app settings.');
        }
        print('DEBUG: Storage permission granted');
      }

      // Step 3: Get download path
      print('DEBUG: Getting download directory...');
      Directory? dir;
      if (Platform.isAndroid) {
        // Try to get the Downloads directory first, fall back to external storage
        try {
          dir = Directory('/storage/emulated/0/Download');
          if (!await dir.exists()) {
            print(
                'DEBUG: Downloads directory not accessible, using external storage');
            dir = await getExternalStorageDirectory();
          }
        } catch (e) {
          print('DEBUG: Error accessing Downloads directory: $e');
          dir = await getExternalStorageDirectory();
        }
      } else {
        dir = await getApplicationDocumentsDirectory();
      }

      if (dir == null) {
        throw Exception('Could not access storage directory');
      }

      print('DEBUG: Download directory: ${dir.path}');

      final fileName =
          'tiktok_video_${DateTime.now().millisecondsSinceEpoch}.mp4';
      final filePath = '${dir.path}/$fileName';
      print('DEBUG: Full file path: $filePath');

      // Step 4: Download the video
      print('DEBUG: Starting video download from: $videoUrl');
      final videoResponse = await http.get(Uri.parse(videoUrl));

      print(
          'DEBUG: Video download response status: ${videoResponse.statusCode}');
      print('DEBUG: Video file size: ${videoResponse.bodyBytes.length} bytes');

      if (videoResponse.statusCode == 200) {
        final file = File(filePath);
        await file.writeAsBytes(videoResponse.bodyBytes);
        print('DEBUG: Video saved successfully at: $filePath');

        // Verify file was created
        if (await file.exists()) {
          final fileSize = await file.length();
          print('DEBUG: Verified file exists with size: $fileSize bytes');
          updateState(AsyncValue.data(filePath));
        } else {
          throw Exception('File was not created successfully');
        }
      } else {
        throw Exception(
            'Failed to download video: ${videoResponse.statusCode}');
      }
    } catch (e, stackTrace) {
      print('DEBUG: Error occurred: $e');
      print('DEBUG: Stack trace: $stackTrace');
      updateState(AsyncValue.error(e, stackTrace));
    }
  }

  Future<bool> _requestStoragePermission() async {
    try {
      // Get Android version
      final deviceInfo = DeviceInfoPlugin();
      final androidInfo = await deviceInfo.androidInfo;
      final sdkInt = androidInfo.version.sdkInt;

      print('DEBUG: Android SDK version: $sdkInt');

      if (sdkInt >= 33) {
        // Android 13+ (API level 33+) - Use scoped storage
        print('DEBUG: Using scoped storage for Android 13+');

        // For Android 13+, we don't need WRITE_EXTERNAL_STORAGE permission
        // We can write to app-specific external storage without permission
        // Or request MANAGE_EXTERNAL_STORAGE for broader access

        final manageStorageStatus =
            await Permission.manageExternalStorage.status;
        print('DEBUG: Manage external storage status: $manageStorageStatus');

        if (manageStorageStatus.isGranted) {
          return true;
        }

        // Request manage external storage permission
        final result = await Permission.manageExternalStorage.request();
        print('DEBUG: Manage external storage request result: $result');

        if (result.isGranted) {
          return true;
        }

        // If manage external storage is denied, we can still use app-specific directory
        print('DEBUG: Using app-specific external storage directory');
        return true;
      } else if (sdkInt >= 30) {
        // Android 11-12 (API level 30-32)
        print('DEBUG: Using storage permissions for Android 11-12');

        final storageStatus = await Permission.storage.status;
        print('DEBUG: Storage permission status: $storageStatus');

        if (storageStatus.isGranted) {
          return true;
        }

        final result = await Permission.storage.request();
        print('DEBUG: Storage permission request result: $result');
        return result.isGranted;
      } else {
        // Android 10 and below
        print(
            'DEBUG: Using legacy storage permissions for Android 10 and below');

        final storageStatus = await Permission.storage.status;
        print('DEBUG: Storage permission status: $storageStatus');

        if (storageStatus.isGranted) {
          return true;
        }

        final result = await Permission.storage.request();
        print('DEBUG: Storage permission request result: $result');
        return result.isGranted;
      }
    } catch (e) {
      print('DEBUG: Error requesting storage permission: $e');
      return false;
    }
  }
}


// lib/screens/home_screen.dart

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../providers/download_provider.dart';

class HomePage extends ConsumerWidget {
  const HomePage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final asyncValue = ref.watch(downloadProvider);
    final TextEditingController urlController = TextEditingController();

    return Scaffold(
      appBar: AppBar(
        title: const Text('TikTok Video Downloader'),
        backgroundColor: Colors.blue.shade700,
        foregroundColor: Colors.white,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Card(
              elevation: 4,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  children: [
                    TextField(
                      controller: urlController,
                      decoration: const InputDecoration(
                        labelText: 'Enter TikTok Video URL',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.link),
                        hintText: 'Enter tiktok video url',
                      ),
                      maxLines: 2,
                    ),
                    const SizedBox(height: 20),
                    SizedBox(
                      width: double.infinity,
                      height: 50,
                      child: ElevatedButton.icon(
                        onPressed: asyncValue.isLoading
                            ? null
                            : () {
                                final url = urlController.text.trim();
                                // print('DEBUG: User entered URL: $url');

                                if (url.isEmpty) {
                                  ScaffoldMessenger.of(context).showSnackBar(
                                    const SnackBar(
                                      content:
                                          Text('Please enter a TikTok URL'),
                                      backgroundColor: Colors.orange,
                                    ),
                                  );
                                  return;
                                }

                                if (!_isValidTikTokUrl(url)) {
                                  ScaffoldMessenger.of(context).showSnackBar(
                                    const SnackBar(
                                      content: Text(
                                          'Please enter a valid TikTok URL'),
                                      backgroundColor: Colors.red,
                                    ),
                                  );
                                  return;
                                }

                                final downloadService =
                                    ref.read(downloadServiceProvider);
                                downloadService.downloadVideo(url, (state) {
                                  ref
                                      .read(downloadProvider.notifier)
                                      .updateState(state);
                                });
                              },
                        icon: asyncValue.isLoading
                            ? const SizedBox(
                                width: 20,
                                height: 20,
                                child: CircularProgressIndicator(
                                  strokeWidth: 2,
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                      Colors.white),
                                ),
                              )
                            : const Icon(Icons.download),
                        label: Text(
                          asyncValue.isLoading
                              ? 'Downloading...'
                              : 'Download Video',
                          style: const TextStyle(fontSize: 16),
                        ),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.blue.shade700,
                          foregroundColor: Colors.white,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 30),
            Card(
              elevation: 2,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  children: [
                    Icon(
                      asyncValue.when(
                        data: (path) => path.isEmpty
                            ? Icons.cloud_download_outlined
                            : Icons.check_circle_outline,
                        loading: () => Icons.hourglass_empty,
                        error: (_, __) => Icons.error_outline,
                      ),
                      size: 48,
                      color: asyncValue.when(
                        data: (path) =>
                            path.isEmpty ? Colors.grey : Colors.green,
                        loading: () => Colors.blue,
                        error: (_, __) => Colors.red,
                      ),
                    ),
                    const SizedBox(height: 12),
                    asyncValue.when(
                      data: (path) {
                        if (path.isEmpty) {
                          return const Text(
                            'Ready to download!',
                            style: TextStyle(
                              fontSize: 16,
                              color: Colors.grey,
                            ),
                          );
                        } else {
                          return Column(
                            children: [
                              const Text(
                                'Video downloaded successfully!',
                                style: TextStyle(
                                  fontSize: 16,
                                  color: Colors.green,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              const SizedBox(height: 8),
                              Text(
                                'Saved to: ${_getFileName(path)}',
                                style: const TextStyle(
                                  fontSize: 12,
                                  color: Colors.grey,
                                ),
                                textAlign: TextAlign.center,
                              ),
                              const SizedBox(height: 8),
                              TextButton.icon(
                                onPressed: () {
                                  // Reset state for next download
                                  ref
                                      .read(downloadProvider.notifier)
                                      .updateState(const AsyncValue.data(''));
                                  urlController.clear();
                                },
                                icon: const Icon(Icons.refresh),
                                label: const Text('Download Another'),
                              ),
                            ],
                          );
                        }
                      },
                      loading: () => const Column(
                        children: [
                          CircularProgressIndicator(),
                          SizedBox(height: 12),
                          Text(
                            'Downloading video...',
                            style: TextStyle(
                              fontSize: 16,
                              color: Colors.blue,
                            ),
                          ),
                        ],
                      ),
                      error: (error, stack) => Column(
                        children: [
                          Text(
                            'Error: ${error.toString()}',
                            style: const TextStyle(
                              color: Colors.red,
                              fontSize: 14,
                            ),
                            textAlign: TextAlign.center,
                          ),
                          const SizedBox(height: 8),
                          TextButton.icon(
                            onPressed: () {
                              // Reset state to try again
                              ref
                                  .read(downloadProvider.notifier)
                                  .updateState(const AsyncValue.data(''));
                            },
                            icon: const Icon(Icons.refresh),
                            label: const Text('Try Again'),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 20),
            const Text(
              'Note: Make sure you have permission to download the video and comply with TikTok\'s terms of service.',
              style: TextStyle(
                fontSize: 12,
                color: Colors.grey,
                fontStyle: FontStyle.italic,
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }

  bool _isValidTikTokUrl(String url) {
    return true;
    // Basic TikTok URL validation
    // final tiktokRegex = RegExp(
    //   r'^https?://(www\.)?(tiktok\.com|vm\.tiktok\.com)',
    //   caseSensitive: false,
    // );
    // return tiktokRegex.hasMatch(url);
  }

  String _getFileName(String path) {
    return path.split('/').last;
  }
}

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'screens/home_screen.dart';

void main() {
  runApp(const ProviderScope(child: MyApp()));
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'TikTok Downloader',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: const HomePage(),
    );
  }
}

error "Exception: Storage permission denied"